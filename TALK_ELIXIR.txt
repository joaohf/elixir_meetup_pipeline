

Elixir Pipelines

EIP: Pipes and Filters

https://www.enterpriseintegrationpatterns.com/patterns/messaging/PipesAndFilters.html

https://www.enterpriseintegrationpatterns.com/img/PipesAndFilters.gif

Each filter exposes a very simple interface:
 it receives messages on the inbound pipe,
 processes the message,
 and publishes the results to the outbound pipe.

The pipe connects one filter to the next,
 sending output messages from one filter to the next.


O que posso fazer com isso?

 - Organizar melhor o código (runtime properties) onde cada estágio faz uma operação específica
 - Incluir novos processamentos de forma fácil

Quais problemas posso ter?

 - Produzir eventos muito rapidamente
 - Consumidor não processar no tempo correto
 - Back pressure
 - Concorrencia

GenStage: building block

https://github.com/elixir-lang/gen_stage

Producer and consumer pipelines with back-pressure for Elixir

Possibilidade de criar stages de processamento para enviar e receber dados de outros stages

Back pressure:

To start the flow of events:
 we subscribe consumers to producers.
  consumers will ask the producers for events.
 We typically say the consumer is sending demand upstream.
 Once demand arrives, the producer will emit items, never emitting more items than the consumer asked for.

 This provides a back-pressure mechanism.

A consumer may have multiple producers and a producer may have multiple consumers.
 When a consumer asks for data, each producer is handled separately,
  with its own demand.
 When a producer receives demand and sends data to multiple consumers, the demand is tracked and the events are sent by a dispatcher.
 This allows producers to send data using different “strategies”.

- Produtor: quando o stage envia dados
- Consumidor: quando o stage recebe dados
- Produtor-Consumidor: envia e recebe dados

[A] -> [B] -> [C]


             [Consumer]
            /
[Producer]-<-[Consumer]
            \
             [Consumer]


Buffering

Buffering events
 the producer will automatically buffer the events
 when an event cannot be sent immediately by a producer, the event will be automatically stored and sent the next time consumers ask for events.

Buffering demand
  In case consumers send demand and the producer is not yet ready to fill in the demand, producers must buffer the demand until data arrives.


Real world example: Eugenio Jaiminho


Data Ingestion using:
 - http
 - websocket

Convert external events to Eugenio internal event stream
 - json

Publish to message broker topics
 - Kafka

Regular elixir application
 - mix tool
 - distillery, to handle release
 - dev,test,prod
 - phoenix
 - gen_stage
 - statix

Runtime
 - Docker container
 - UCR (Mesos)

Non-functional requirements
 - metrics
 - logs
 - Azure Event Hub with Kafka
 - Open source Kafka

Overall design


Let's test



- Send event to Eugenio Jaiminho

- See at Kafka consumer


Outras bibliotecas interessantes

Flow

https://github.com/plataformatec/flow

Flow allows developers to express computations on collections, similar to the Enum and Stream modules, although computations will be executed in parallel using multiple GenStages.

Referências:

https://www.youtube.com/watch?v=6gcsjCl9ne0

https://www.youtube.com/watch?v=trpueWn8DIM

https://www.youtube.com/watch?v=XPlXNUXmcgE

https://blog.emerleite.com/using-elixir-genstage-to-track-video-watch-progress-9b114786c604




